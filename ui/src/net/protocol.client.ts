// @generated by protobuf-ts 2.2.2
// @generated from protobuf file "protocol.proto" (package "protocol", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ConfigService } from "./protocol";
import type { Sensor } from "./protocol";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConfigResult } from "./protocol";
import type { Zigbee2MQTTConfig } from "./protocol";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service protocol.ConfigService
 */
export interface IConfigServiceClient {
    /**
     * @generated from protobuf rpc: Zigbee2MQTT(protocol.Zigbee2MQTTConfig) returns (protocol.ConfigResult);
     */
    zigbee2MQTT(input: Zigbee2MQTTConfig, options?: RpcOptions): UnaryCall<Zigbee2MQTTConfig, ConfigResult>;
    /**
     * @generated from protobuf rpc: Listen(protocol.Sensor) returns (stream protocol.Sensor);
     */
    listen(input: Sensor, options?: RpcOptions): ServerStreamingCall<Sensor, Sensor>;
}
/**
 * @generated from protobuf service protocol.ConfigService
 */
export class ConfigServiceClient implements IConfigServiceClient, ServiceInfo {
    typeName = ConfigService.typeName;
    methods = ConfigService.methods;
    options = ConfigService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Zigbee2MQTT(protocol.Zigbee2MQTTConfig) returns (protocol.ConfigResult);
     */
    zigbee2MQTT(input: Zigbee2MQTTConfig, options?: RpcOptions): UnaryCall<Zigbee2MQTTConfig, ConfigResult> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Zigbee2MQTTConfig, ConfigResult>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Listen(protocol.Sensor) returns (stream protocol.Sensor);
     */
    listen(input: Sensor, options?: RpcOptions): ServerStreamingCall<Sensor, Sensor> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Sensor, Sensor>("serverStreaming", this._transport, method, opt, input);
    }
}
