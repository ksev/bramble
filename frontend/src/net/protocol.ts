// @generated by protobuf-ts 2.4.0 with parameter client_none,// @generated from protobuf file "protocol.proto" (package "protocol", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message protocol.Void
 */
export interface Void {
}
/**
 * @generated from protobuf message protocol.Zigbee2MQTTConfig
 */
export interface Zigbee2MQTTConfig {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
}
/**
 * @generated from protobuf message protocol.Zigbee2MQTTServer
 */
export interface Zigbee2MQTTServer {
    /**
     * @generated from protobuf field: string host = 1;
     */
    host: string;
    /**
     * @generated from protobuf field: uint32 port = 2;
     */
    port: number;
    /**
     * @generated from protobuf field: uint32 devices = 3;
     */
    devices: number;
}
/**
 * @generated from protobuf message protocol.Zigbee2MQTTServers
 */
export interface Zigbee2MQTTServers {
    /**
     * @generated from protobuf field: repeated protocol.Zigbee2MQTTServer servers = 1;
     */
    servers: Zigbee2MQTTServer[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Void$Type extends MessageType<Void> {
    constructor() {
        super("protocol.Void", []);
    }
    create(value?: PartialMessage<Void>): Void {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Void>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Void): Void {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Void, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protocol.Void
 */
export const Void = new Void$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Zigbee2MQTTConfig$Type extends MessageType<Zigbee2MQTTConfig> {
    constructor() {
        super("protocol.Zigbee2MQTTConfig", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Zigbee2MQTTConfig>): Zigbee2MQTTConfig {
        const message = { url: "", username: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Zigbee2MQTTConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Zigbee2MQTTConfig): Zigbee2MQTTConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Zigbee2MQTTConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protocol.Zigbee2MQTTConfig
 */
export const Zigbee2MQTTConfig = new Zigbee2MQTTConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Zigbee2MQTTServer$Type extends MessageType<Zigbee2MQTTServer> {
    constructor() {
        super("protocol.Zigbee2MQTTServer", [
            { no: 1, name: "host", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "port", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "devices", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Zigbee2MQTTServer>): Zigbee2MQTTServer {
        const message = { host: "", port: 0, devices: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Zigbee2MQTTServer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Zigbee2MQTTServer): Zigbee2MQTTServer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string host */ 1:
                    message.host = reader.string();
                    break;
                case /* uint32 port */ 2:
                    message.port = reader.uint32();
                    break;
                case /* uint32 devices */ 3:
                    message.devices = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Zigbee2MQTTServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string host = 1; */
        if (message.host !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.host);
        /* uint32 port = 2; */
        if (message.port !== 0)
            writer.tag(2, WireType.Varint).uint32(message.port);
        /* uint32 devices = 3; */
        if (message.devices !== 0)
            writer.tag(3, WireType.Varint).uint32(message.devices);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protocol.Zigbee2MQTTServer
 */
export const Zigbee2MQTTServer = new Zigbee2MQTTServer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Zigbee2MQTTServers$Type extends MessageType<Zigbee2MQTTServers> {
    constructor() {
        super("protocol.Zigbee2MQTTServers", [
            { no: 1, name: "servers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Zigbee2MQTTServer }
        ]);
    }
    create(value?: PartialMessage<Zigbee2MQTTServers>): Zigbee2MQTTServers {
        const message = { servers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Zigbee2MQTTServers>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Zigbee2MQTTServers): Zigbee2MQTTServers {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated protocol.Zigbee2MQTTServer servers */ 1:
                    message.servers.push(Zigbee2MQTTServer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Zigbee2MQTTServers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated protocol.Zigbee2MQTTServer servers = 1; */
        for (let i = 0; i < message.servers.length; i++)
            Zigbee2MQTTServer.internalBinaryWrite(message.servers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protocol.Zigbee2MQTTServers
 */
export const Zigbee2MQTTServers = new Zigbee2MQTTServers$Type();
/**
 * @generated ServiceType for protobuf service protocol.Zigbee2MQTTService
 */
export const Zigbee2MQTTService = new ServiceType("protocol.Zigbee2MQTTService", [
    { name: "Config", options: {}, I: Zigbee2MQTTConfig, O: Zigbee2MQTTServer },
    { name: "Status", options: {}, I: Void, O: Zigbee2MQTTServers }
]);
import { derived, type Readable } from "svelte/store";

export interface RpcTransport {
    unary(serviceId: number, callId: number, input: Uint8Array): Promise<Uint8Array>;
    stream(serviceId: number, callId: number, input: Uint8Array): Readable<Uint8Array>;
}
// ========================== Zigbee2MqttService ==========================
export class Zigbee2MqttServiceClient {
    constructor(private transport: RpcTransport) {}

    
        
            config(input: Zigbee2MQTTConfig): Promise<Zigbee2MQTTServer> {
                return this.transport.unary(
                    0xd109,
                    0xd74e,
                    Zigbee2MQTTConfig.toBinary(input),
                ).then(b => b ? Zigbee2MQTTServer.fromBinary(b) : null);
            }
        
    
        
            status(input: Void): Promise<Zigbee2MQTTServers> {
                return this.transport.unary(
                    0xd109,
                    0x9b83,
                    Void.toBinary(input),
                ).then(b => b ? Zigbee2MQTTServers.fromBinary(b) : null);
            }
        
    
}
